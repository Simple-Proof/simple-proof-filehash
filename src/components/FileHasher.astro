---
import Footer from '../components/Footer.astro';
---

<div class="min-h-screen bg-background py-8 px-4 sm:px-6 lg:px-8 flex flex-col">
  <div class="max-w-4xl mx-auto flex-grow w-full">
    <div class="logo-container flex justify-center mb-5 pt-[60px] md:pt-[30px] md:mb-8">
      <img src="/logo.svg" alt="Simple Proof Logo" class="h-[30px] md:h-[40px] w-auto">
    </div>
    <div class="text-center mt-8">
      <h1 class="text-3xl font-ibm-bold text-primary sm:text-4xl">
        Hash List Generator
      </h1>
      <p class="mt-3 text-lg text-text-secondary">
        Calculate SHA-256 hashes of your files directly in the browser
      </p>
    </div>

    <div class="mt-8">
      <!-- Upload card -->
      <div class="bg-white rounded-lg shadow-light p-6 mb-6">
        <div class="flex flex-col md:flex-row md:items-center">
          <!-- Left side with icon and text -->
          <div class="md:w-1/3 mb-4 md:mb-0">
            <div class="flex items-center mb-2">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-tertiary mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                <path stroke-linecap="round" stroke-linejoin="round" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
              <h2 class="text-primary font-ibm-semibold text-xl">Upload Files</h2>
            </div>
            <p class="text-text-light text-sm">
              Add files to generate SHA-256 hashes.<br>All processing happens locally in your browser for maximum security.
            </p>
          </div>

          <!-- Right side with drop zone -->
          <div class="md:w-2/3 md:pl-4">
            <div 
              id="dropZone"
              class="border-2 border-dashed border-border-medium rounded-lg p-6 cursor-pointer text-center hover:border-primary transition-colors"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="mx-auto h-8 w-8 text-primary mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                <path stroke-linecap="round" stroke-linejoin="round" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
              </svg>
              <p class="text-text-secondary mb-2">Drag and drop your files here</p>
              <p class="text-text-lighter text-sm mb-3">OR</p>
              <button id="browseButton" class="bg-primary hover:bg-primary-shade text-white py-2 px-4 rounded text-sm transition-colors font-ibm-medium">
                Browse Files
              </button>
              <input
                id="file-upload"
                type="file"
                multiple
                class="sr-only"
              />
            </div>
          </div>
        </div>
      </div>

      <!-- Debug info (hidden by default) -->
      <div id="debugInfo" class="mt-4 p-3 bg-background-light dark:bg-gray-800 rounded-md text-sm hidden">
        <p class="font-ibm-medium mb-1">Drag & Drop Debug Info:</p>
        <div id="debugText" class="font-mono text-xs"></div>
      </div>

      <!-- Results Card -->
      <div class="bg-white rounded-lg shadow-light overflow-hidden">
        <div class="p-4 flex items-center border-b border-border-light">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-primary mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
            <path stroke-linecap="round" stroke-linejoin="round" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
          </svg>
          <h2 class="text-text font-ibm-medium text-lg">File Hashes</h2>
        </div>

        <!-- Table Headers -->
        <div class="hidden" id="resultsTable">
          <div class="grid grid-cols-12 bg-background-light text-sm font-ibm-medium text-text-dark p-3">
            <div class="col-span-11 md:col-span-10 grid grid-cols-1 md:grid-cols-12 gap-1 md:gap-0">
              <div class="md:col-span-6">SHA-256 Hash</div>
              <div class="md:col-span-5">File Name</div>
              <div class="hidden md:block md:col-span-1">Extension</div>
            </div>
            <div class="col-span-1 text-center">Actions</div>
          </div>

          <!-- Table Body -->
          <div class="divide-y divide-border-light" id="resultsBody">
            <!-- Results will be inserted here dynamically -->
          </div>
        </div>

          <!-- Table Body -->
          <div class="divide-y divide-border-light" id="resultsBody">
            <!-- Results will be inserted here dynamically -->
          </div>
        </div>

        <!-- Empty state -->
        <div id="emptyState" class="py-12 text-center text-text-light">
          No files processed yet. Add files to see their hashes.
        </div>
      </div>

      <!-- Action Buttons -->
      <div class="mt-6 flex flex-col sm:flex-row justify-between space-y-4 sm:space-y-0 sm:space-x-4 hidden" id="actionButtons">
        <div class="flex flex-grow max-w-xs">
          <div class="relative flex-grow">
            <label for="filenameInput" class="block text-sm font-ibm-medium text-text-dark dark:text-gray-300 mb-1">Filename</label>
            <input 
              type="text" 
              id="filenameInput" 
              class="block w-full rounded-md border-border-medium dark:border-gray-700 shadow-sm focus:border-primary focus:ring-primary text-sm bg-white dark:bg-gray-800 text-text-dark dark:text-gray-100 px-3 py-2" 
            />
          </div>
        </div>
        <div class="flex justify-end space-x-4">
          <button
            type="button"
            id="clearAllButton"
            class="inline-flex items-center px-4 py-2 border border-border-medium dark:border-gray-700 shadow-sm text-sm font-ibm-medium rounded-md text-text-dark dark:text-gray-200 bg-white dark:bg-gray-800 hover:bg-background-light dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary"
          >
            Clear All
          </button>
          <button
            type="button"
            id="copyButton"
            class="inline-flex items-center px-4 py-2 border border-border-medium dark:border-gray-700 shadow-sm text-sm font-ibm-medium rounded-md text-text-dark dark:text-gray-200 bg-white dark:bg-gray-800 hover:bg-background-light dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary"
          >
            Copy to Clipboard
          </button>
          <button
            type="button"
            id="downloadButton"
            class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-ibm-medium rounded-md text-white bg-tertiary hover:bg-tertiary-shade focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-tertiary"
          >
            Download CSV
          </button>
        </div>
      </div>
    </div>
  </div>

  <Footer />

</div>

<script>
interface FileResult {
  name: string;
  extension: string;
  hash: string;
  id: string;
}

const results: FileResult[] = [];
let debugMode = false; // Set to true to enable debugging

// Debug helper function
function debugLog(message: string) {
  if (!debugMode) return;
  
  console.log(message);
  
  const debugText = document.getElementById('debugText');
  const debugInfo = document.getElementById('debugInfo');
  
  if (debugText && debugInfo) {
    debugInfo.classList.remove('hidden');
    const timestamp = new Date().toLocaleTimeString();
    debugText.innerHTML += `[${timestamp}] ${message}<br>`;
    debugText.scrollTop = debugText.scrollHeight;
  }
}

function generateTimeBasedHex(): string {
  // Create a compact hexadecimal code based on current date and time
  const now = new Date();
  
  // Extract date components
  const year = now.getFullYear() % 100; // Last 2 digits of year
  const month = now.getMonth() + 1;     // Months are 0-11
  const day = now.getDate();
  const hour = now.getHours();
  const minute = now.getMinutes();
  const secondFraction = Math.floor((now.getSeconds() * 1000 + now.getMilliseconds()) / (1000 * 60 / 256));
  
  // Combine into a single number
  const combined = (year << 20) | (month << 16) | (day << 11) | (hour << 6) | minute;
  
  // Convert to hex and add seconds/ms
  return combined.toString(16).padStart(6, '0') + secondFraction.toString(16).padStart(2, '0');
}

function generateDefaultFilename(): string {
  return `SimpleProofHashList_${generateTimeBasedHex()}`;
}

async function calculateHash(file: File): Promise<string> {
  try {
    // Create a Blob from the file to ensure access
    const fileBlob = new Blob([file], { type: file.type });
    const buffer = await fileBlob.arrayBuffer();
    const hashBuffer = await crypto.subtle.digest('SHA-256', buffer);
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
  } catch (error) {
    console.error('Error in calculateHash:', error);
    throw error;
  }
}

function getFileNameAndExtension(filename: string): [string, string] {
  const lastDotIndex = filename.lastIndexOf('.');
  if (lastDotIndex === -1) return [filename, ''];
  return [
    filename.substring(0, lastDotIndex),
    filename.substring(lastDotIndex + 1)
  ];
}

function updateTable() {
  const tbody = document.getElementById('resultsBody')!;
  const table = document.getElementById('resultsTable')!;
  const actionButtons = document.getElementById('actionButtons')!;
  const emptyState = document.getElementById('emptyState')!;
  
  tbody.innerHTML = results.map(result => `
    <div data-id="${result.id}" class="grid grid-cols-12 py-3 px-3 items-center hover:bg-background-light transition-colors">
      <!-- Mobile optimization: Stack hash and filename in small screens -->
      <div class="col-span-11 md:col-span-10 grid grid-cols-1 md:grid-cols-12 gap-1 md:gap-0">
        <!-- Hash (full width on mobile, proper column on desktop) -->
        <div class="md:col-span-6 font-mono text-xs text-text-secondary overflow-hidden">
          ${result.hash.substring(0, 16)}...${result.hash.substring(result.hash.length - 16)}
        </div>
        
        <!-- Filename (full width on mobile, proper column on desktop) -->
        <div class="md:col-span-5 text-text-dark truncate">
          ${result.name}${result.extension ? '.'+result.extension : ''}
        </div>
        
        <!-- Extension (desktop only) -->
        <div class="hidden md:block md:col-span-1 text-text-light">${result.extension}</div>
      </div>
      
      <!-- Delete button (always right-aligned) -->
      <div class="col-span-1 md:col-span-1 text-center">
        <button 
          class="text-danger hover:text-danger-shade focus:outline-none remove-file" 
          data-id="${result.id}"
          title="Remove file"
        >
          <span class="text-lg font-bold leading-none">×</span>
        </button>
      </div>
    </div>
  `).join('');

  // Add event listeners to remove buttons
  document.querySelectorAll('.remove-file').forEach(button => {
    button.addEventListener('click', (e) => {
      let target = e.target as HTMLElement;
      
      // If the clicked element is the span inside the button,
      // find the parent button that has the data-id
      if (!target.hasAttribute('data-id') && target.parentElement) {
        target = target.closest('[data-id]') || target;
      }
      
      const id = target.getAttribute('data-id');
      removeFile(id);
    });
  });

  if (results.length > 0) {
    table.classList.remove('hidden');
    actionButtons.classList.remove('hidden');
    emptyState.classList.add('hidden');
  } else {
    table.classList.add('hidden');
    actionButtons.classList.add('hidden');
    emptyState.classList.remove('hidden');
  }
}

function removeFile(id: string | null) {
  if (!id) return;
  
  const index = results.findIndex(r => r.id === id);
  if (index !== -1) {
    results.splice(index, 1);
    updateTable();
  }
}

function clearResults() {
  results.length = 0;
  updateTable();
  resetFilenameInput();
}

function resetFilenameInput() {
  const filenameInput = document.getElementById('filenameInput') as HTMLInputElement;
  filenameInput.value = generateDefaultFilename();
}

// Process each file individually
async function processFile(file: File) {
  debugLog(`Processing file: ${file.name} (${file.size} bytes)`);
  
  try {
    const hash = await calculateHash(file);
    const [name, extension] = getFileNameAndExtension(file.name);
    
    results.push({ 
      name, 
      extension, 
      hash,
      id: `file-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`
    });
    
    debugLog(`Hash calculated for ${file.name}: ${hash.substring(0, 8)}...`);
    updateTable(); // Update table after each file
  } catch (error) {
    debugLog(`Error processing file ${file.name}: ${error}`);
    console.error('Error processing file:', file.name, error);
  }
}

// Handle multiple files from input or drop
async function handleFiles(files: FileList) {
  debugLog(`Processing ${files.length} files`);
  
  // Convert FileList to Array for safer processing
  const fileArray = Array.from(files);
  for (const file of fileArray) {
    await processFile(file);
  }
}

function downloadCSV() {
  const filenameInput = document.getElementById('filenameInput') as HTMLInputElement;
  let filename = filenameInput.value.trim();
  
  if (!filename) {
    filename = generateDefaultFilename();
    filenameInput.value = filename;
  }
  
  const csv = [
    ['SHA-256 Hash', 'File Name', 'Extension'],
    ...results.map(r => [r.hash, r.name, r.extension])
  ].map(row => row.join(',')).join('\n');
  
  const blob = new Blob([csv], { type: 'text/csv' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = `${filename}.csv`;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
  
  // Show success message
  showSuccessToast('File downloaded successfully!');
  
  // Clear results after download
  clearResults();
}

async function copyToClipboard() {
  const text = results.map(r => {
    const fullFilename = r.extension ? `${r.name}.${r.extension}` : r.name;
    return `${r.hash}: ${fullFilename}`;
  }).join('\n');
  await navigator.clipboard.writeText(text);
  
  showSuccessToast('Copied to clipboard!');
  
  const copyButton = document.getElementById('copyButton')!;
  const originalText = copyButton.textContent;
  copyButton.textContent = 'Copied!';
  setTimeout(() => {
    copyButton.textContent = originalText;
  }, 2000);
}

// Simple toast message function
function showSuccessToast(message: string) {
  const toast = document.createElement('div');
  toast.className = 'fixed bottom-4 right-4 bg-primary text-white px-4 py-2 rounded-md shadow-md z-50 toast-success';
  toast.innerText = message;
  document.body.appendChild(toast);
  
  setTimeout(() => {
    toast.classList.add('opacity-0', 'transition-opacity', 'duration-300');
    setTimeout(() => {
      document.body.removeChild(toast);
    }, 300);
  }, 2000);
}

// Event Listeners
document.addEventListener('DOMContentLoaded', () => {
  debugLog('DOM loaded - initializing application');
  
  const fileInput = document.getElementById('file-upload') as HTMLInputElement;
  const dropZone = document.getElementById('dropZone')!;
  const downloadButton = document.getElementById('downloadButton')!;
  const copyButton = document.getElementById('copyButton')!;
  const clearAllButton = document.getElementById('clearAllButton')!;
  const filenameInput = document.getElementById('filenameInput') as HTMLInputElement;
  const browseButton = document.getElementById('browseButton')!;

  // Set default filename
  resetFilenameInput();

  // Make the entire drop zone clickable to open file dialog
  dropZone.addEventListener('click', (e) => {
    // Only trigger if not clicking on the label/input directly
    const target = e.target as HTMLElement;
    if (!target.closest('button')) {
      debugLog('Drop zone clicked - opening file dialog');
      fileInput.click();
    }
  });
  
  // Browse button click
  browseButton.addEventListener('click', () => {
    fileInput.click();
  });

  fileInput.addEventListener('change', (e) => {
    const files = (e.target as HTMLInputElement).files;
    if (files && files.length > 0) {
      debugLog(`File input changed - ${files.length} files selected`);
      handleFiles(files);
      
      // Add visual feedback
      dropZone.classList.add('bg-[rgba(0,26,114,0.03)]', 'border-primary');
      setTimeout(() => {
        dropZone.classList.remove('bg-[rgba(0,26,114,0.03)]', 'border-primary');
      }, 500);
    }
  });

  // Set up drag and drop with counter pattern
  setupDragAndDrop();

  function setupDragAndDrop() {
    debugLog('Setting up drag and drop handlers');
    
    let dragCounter = 0;
    
    // Prevent defaults at document level
    document.addEventListener('dragover', (e) => {
      e.preventDefault();
    }, false);
    
    document.addEventListener('drop', (e) => {
      e.preventDefault();
    }, false);
    
    // Track enter/leave with counter
    dropZone.addEventListener('dragenter', (e) => {
      e.preventDefault();
      dragCounter++;
      debugLog(`Drag enter - counter: ${dragCounter}`);
      dropZone.classList.add('border-primary');
      dropZone.classList.add('bg-[rgba(0,26,114,0.03)]');
    }, false);
    
    dropZone.addEventListener('dragleave', (e) => {
      e.preventDefault();
      dragCounter--;
      debugLog(`Drag leave - counter: ${dragCounter}`);
      if (dragCounter === 0) {
        dropZone.classList.remove('border-primary');
        dropZone.classList.remove('bg-[rgba(0,26,114,0.03)]');
      }
    }, false);
    
    dropZone.addEventListener('dragover', (e) => {
      e.preventDefault();
    }, false);
    
    dropZone.addEventListener('drop', (e) => {
      e.preventDefault();
      dragCounter = 0;
      dropZone.classList.remove('border-primary');
      dropZone.classList.remove('bg-[rgba(0,26,114,0.03)]');
      
      debugLog('Drop event detected');
      if (e.dataTransfer) {
        debugLog(`DataTransfer available - files: ${e.dataTransfer.files.length}`);
        
        if (e.dataTransfer.files.length > 0) {
          // Convert FileList to Array for safer processing
          const fileArray = Array.from(e.dataTransfer.files);
          const fileNames = fileArray.map(f => f.name).join(', ');
          debugLog(`Files dropped: ${fileNames}`);
          
          // Process each file individually
          fileArray.forEach(file => {
            processFile(file);
          });
        } else {
          debugLog('No files in the drop event');
        }
      } else {
        debugLog('No dataTransfer in the drop event');
      }
    }, false);
  }

  downloadButton.addEventListener('click', downloadCSV);
  copyButton.addEventListener('click', copyToClipboard);
  clearAllButton.addEventListener('click', clearResults);
  
  // Show empty state initially and hide results table
  const resultsTable = document.getElementById('resultsTable')!;
  const actionButtons = document.getElementById('actionButtons')!;
  const emptyState = document.getElementById('emptyState')!;
  
  resultsTable.classList.add('hidden');
  actionButtons.classList.add('hidden');
  emptyState.classList.remove('hidden');
  
  debugLog('Application initialized successfully');
});
</script>

<style>
/* Animations */
@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes slideUp {
  from { transform: translateY(10px); opacity: 0; }
  to { transform: translateY(0); opacity: 1; }
}

.toast-success {
  animation: slideUp 0.3s ease-out forwards;
}

/* Custom transition for removing toast */
.opacity-0 {
  opacity: 0;
}

.transition-opacity {
  transition: opacity 0.3s ease;
}

.duration-300 {
  transition-duration: 300ms;
}
</style>
